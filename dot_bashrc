# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*; do
        if [ -f "$rc" ]; then
            . "$rc"
        fi
    done
fi
unset rc

# Install plugins
_bash_plugins_installation() {
  unset -f "$0"
  local reset_nullglob="$(shopt -p nullglob)"
  shopt -s nullglob # suppress errors when for loops have no matching files

  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local bash_configs="${xdg_config_home}/bash"
  local bash_plugins="${bash_configs}/plugins"
  local file
  for file in ${bash_plugins}/*.install.bash; do
    source "$file"
  done

  local xdg_cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
  local bash_cache="${xdg_cache_home}/bash"
  local bash_cached_plugins="${bash_cache}/plugins"
  mkdir -p "${bash_cached_plugins}"

  # TODO: move these into plugin.install.bash files, and figure out how to determine which plugins
  # need to be rebuilt
  if [[ -d "${bash_plugins}/bash-preexec" ]] && \
    [[ ! -d "${bash_cached_plugins}/bash-preexec" ]]; then
      cp -r "${bash_plugins}/bash-preexec" "${bash_cached_plugins}/bash-preexec"
  fi

  $reset_nullglob
}
_bash_plugins_installation

# Load plugins
_bash_plugins_loading() {
  unset -f "$0"
  local reset_nullglob="$(shopt -p nullglob)"
  shopt -s nullglob # suppress errors when for loops have no matching files

  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local bash_configs="${xdg_config_home}/bash"
  local bash_plugins="${bash_configs}/plugins"
  local file
  for file in ${bash_plugins}/*.load.bash; do
    source "$file"
  done

  local xdg_cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
  local bash_cache="${xdg_cache_home}/bash"
  local bash_cached_plugins="${bash_cache}/plugins"
  if [ -f "${bash_cached_plugins}/bash-preexec/bash-preexec.sh" ]; then
    source "${bash_cached_plugins}/bash-preexec/bash-preexec.sh"
  fi

  $reset_nullglob
}
_bash_plugins_loading

# Set up integrations
_bash_integrations() {
  unset -f "$0"
  local reset_nullglob="$(shopt -p nullglob)"
  shopt -s nullglob # suppress errors when for loops have no matching files

  # Look for host-provided neovim (needed when the host uses musl instead of glibc, e.g. in Alpine Linux)
  if command -v nvim &> /dev/null; then
    local nvim_host_path="$(which nvim)"
  fi

  # Set up integrations
  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local zsh_configs="${xdg_config_home}/zsh"
  local zsh_integrations="${zsh_configs}/integrations"
  if [ -f "${zsh_integrations}/aqua.sh" ]; then
    source "${zsh_integrations}/aqua.sh"
  fi
  if [ -f "${zsh_integrations}/aqua.bash" ]; then
    source "${zsh_integrations}/aqua.bash"
  fi
  local file
  for file in ${zsh_integrations}/flatpak/*.sh; do
    source "$file"
  done
  for file in ${zsh_integrations}/flatpak/*.bash; do
    source "$file"
  done
  for file in ${zsh_integrations}/cli/*.sh; do
    source "$file"
  done
  for file in ${zsh_integrations}/cli/*.bash; do
    source "$file"
  done

  $reset_nullglob
}
_bash_integrations

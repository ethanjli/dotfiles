# .zshrc

# Set up completions
fpath=(~/.config/zsh/completion $fpath)
autoload compinit
compinit

# Use bash completions
autoload bashcompinit
bashcompinit

# Fix keys and shortcuts
WORDCHARS='_'
bindkey "^[[3~" delete-char
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^A" vi-beginning-of-line
bindkey "^E" vi-end-of-line
bindkey "^H" backward-kill-word
bindkey "^[[3;5~" kill-word

# Set up distrobox completions
if [ -f /usr/share/bash-completion/completions/distrobox ]; then
  source /usr/share/bash-completion/completions/distrobox
fi
if [ -f /usr/share/bash-completion/completions/distrobox-assemble ]; then
  source /usr/share/bash-completion/completions/distrobox-assemble
fi
if [ -f /usr/share/bash-completion/completions/distrobox-create ]; then
  source /usr/share/bash-completion/completions/distrobox-create
fi
if [ -f /usr/share/bash-completion/completions/distrobox-enter ]; then
  source /usr/share/bash-completion/completions/distrobox-enter
fi
if [ -f /usr/share/bash-completion/completions/distrobox-ephemeral ]; then
  source /usr/share/bash-completion/completions/distrobox-ephemeral
fi
if [ -f /usr/share/bash-completion/completions/distrobox-generate-entry ]; then
  source /usr/share/bash-completion/completions/distrobox-generate-entry
fi
if [ -f /usr/share/bash-completion/completions/distrobox-list ]; then
  source /usr/share/bash-completion/completions/distrobox-list
fi
if [ -f /usr/share/bash-completion/completions/distrobox-rm ]; then
  source /usr/share/bash-completion/completions/distrobox-rm
fi
if [ -f /usr/share/bash-completion/completions/distrobox-stop ]; then
  source /usr/share/bash-completion/completions/distrobox-stop
fi
if [ -f /usr/share/bash-completion/completions/distrobox-upgrade ]; then
  source /usr/share/bash-completion/completions/distrobox-upgrade
fi

# Integrate aqua
export PATH="${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}/bin:$PATH"
export AQUA_GLOBAL_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/aquaproj-aqua/aqua.yaml:${AQUA_GLOBAL_CONFIG:-}"
export AQUA_POLICY_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/aquaproj-aqua/aqua-policy.yaml:${AQUA_POLICY_CONFIG:-}"
if command -v aqua &> /dev/null && aqua --version &> /dev/null; then
  aqua i -a
  source <(aqua completion zsh)
fi

# Integrate neovim
if command -v nvim &> /dev/null && nvim --version &> /dev/null; then
  export EDITOR="$(which nvim)"
  export VISUAL="$(which nvim)"
  alias vim=nvim
else
  export EDITOR="$(which vim)"
  export VISUAL="$(which vim)"
fi

# Integrate marktext
function marktext {
  flatpak run com.github.marktext.marktext "$@"
}
compdef _files marktext

# Integrate wezterm
function wezterm {
  flatpak run org.wezfurlong.wezterm "$@"
}

# Integrate tere
if command -v tere &> /dev/null && tere --version &> /dev/null; then
  tere() {
    local result=$($HOME/.local/share/aquaproj-aqua/bin/tere --mouse=on "$@")
    [ -n "$result" ] && cd -- "$result"
  }
fi

# Integrate lf
if command -v lf &> /dev/null && lf --version &> /dev/null; then
  function lfcd {
    cd "$($HOME/.local/share/aquaproj-aqua/bin/lf -print-last-dir "$@")"
  }
fi

# Integrate cheat
if command -v fzf &> /dev/null && fzf --version &> /dev/null; then
  export CHEAT_USE_FZF=true
fi

# Integrate ripgrep-all
if command -v rga &> /dev/null && rga --version &> /dev/null; then
  rga-fzf() {
    RG_PREFIX="rga --files-with-matches"
    local file
    file="$(
      FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
        fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
          --phony -q "$1" \
          --bind "change:reload:$RG_PREFIX {q}" \
          --preview-window="70%:wrap"
    )" &&
    echo "opening $file" &&
    xdg-open "$file"
  }
fi

# Enable starship
if command -v starship &> /dev/null && starship --version &> /dev/null; then
  eval "$(starship init zsh)"
fi

# Enable direnv
if command -v direnv &> /dev/null && direnv --version &> /dev/null; then
  eval "$(direnv hook zsh)"
fi

# Enable atuin
if command -v atuin &> /dev/null && atuin --version &> /dev/null; then
  eval "$(atuin init zsh)"
fi

# Integrate zoxide
if command -v zoxide &> /dev/null && zoxide --version &> /dev/null; then
  eval "$(zoxide init zsh)"
fi
# TODO: include https://github.com/marlonrichert/zsh-autocomplete

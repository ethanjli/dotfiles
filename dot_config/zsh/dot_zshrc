# .zshrc

_zsh_compile() {
  local f
  for f; do
    zcompile -R -- "$f".zwc "$f"
  done
}

# Install plugins
_zsh_plugins_installation() {
  unset -f "$0"

  local xdg_cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
  local zsh_cache="${xdg_cache_home}/zsh"
  local zsh_cached_plugins="${zsh_cache}/plugins"
  mkdir -p "${zsh_cached_plugins}"
  local file
  for file in ${zsh_cached_plugins}/*-install.zsh(.N); do
    source "$file"
  done
  if [[ ! -e "${zsh_cached_plugins}/zsh-completions" ]]; then
    echo "Installing zsh-completions..."
    git clone --depth=1 https://github.com/zsh-users/zsh-completions.git \
      "${zsh_cached_plugins}/zsh-completions"
    echo
  fi
  if [[ ! -e "${zsh_cached_plugins}/zsh-syntax-highlighting" ]]; then
    echo "Installing zsh-syntax-highlighting..."
    git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git \
      "${zsh_cached_plugins}/zsh-syntax-highlighting"
    _zsh_compile ${zsh_cached_plugins}/zsh-syntax-highlighting/{zsh-syntax-highlighting.zsh,highlighters/*/*.zsh}
    echo
  fi
  if [[ ! -e "${zsh_cached_plugins}/zsh-autosuggestions" ]]; then
    echo "Installing zsh-autosuggestions..."
    git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git \
      "${zsh_cached_plugins}/zsh-autosuggestions"
    _zsh_compile ${zsh_cached_plugins}/zsh-autosuggestions/{zsh-autosuggestions.zsh,src/**/*.zsh}
    echo
  fi
  if [[ ! -e "${zsh_cached_plugins}/powerlevel10k" ]]; then
    echo "Installing powerlevel10k..."
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \
      "${zsh_cached_plugins}/powerlevel10k"
    make -C "${zsh_cached_plugins}/powerlevel10k" pkg
    echo
  fi
  if [[ ! -e "${zsh_cached_plugins}/zsh-vim-mode" ]]; then
    echo "Installing zsh-vim-mode..."
    git clone --depth=1 https://github.com/softmoth/zsh-vim-mode.git \
      "${zsh_cached_plugins}/zsh-vim-mode"
    _zsh_compile "${zsh_cached_plugins}/zsh-vim-mode/zsh-vim-mode.plugin.zsh"
    echo
  fi
}
_zsh_plugins_installation

# Perform partial integration of direnv before the instant prompt
_zsh_integrations_pre() {
  unset -f "$0"

  # Look for host-provided neovim (needed when the host uses musl instead of glibc, e.g. in Alpine Linux)
  # before it gets clobbered by aqua
  if command -v nvim &> /dev/null; then
    _zsh_integration_nvim_host_path="$(which nvim)"
  fi

  # Set env vars so that aqua will provide direnv if needed
  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local zsh_configs="${xdg_config_home}/zsh"
  local zsh_integrations="${zsh_configs}/integrations"
  if [ -f "${zsh_integrations}/aqua.sh" ]; then
    source "${zsh_integrations}/aqua.sh"
  fi

  # Set up direnv for instant prompt
  if command -v direnv &> /dev/null; then
    eval "$(direnv export zsh)"
  fi
}
_zsh_integrations_pre

# Activate powerlevel10k instant prompt
_zsh_instant_prompt() {
  unset -f "$0"
  local xdg_cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"

  if [[ -r "${xdg_cache_home}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${xdg_cache_home}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
}
_zsh_instant_prompt
# Note: after this line, nothing is allowed to use stdin!

# Set up completions
_zsh_completions() {
  unset -f "$0"

  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local zsh_configs="${xdg_config_home}/zsh"
  fpath=("${zsh_configs}/completions" $fpath)

  local xdg_cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
  local zsh_cache="${xdg_cache_home}/zsh"
  local zsh_cached_plugins="${zsh_cache}/plugins"
  fpath=("${zsh_cached_plugins}/zsh-completions/src" $fpath)

  zstyle ':completion:*' cache-path "${zsh_cache}/zcompcache"

  zmodload zsh/complist # must be loaded before compinit
  bindkey -M menuselect 'h' vi-backward-char
  bindkey -M menuselect 'k' vi-up-line-or-history
  bindkey -M menuselect 'l' vi-forward-char
  bindkey -M menuselect 'j' vi-down-line-or-history

  local zsh_compdump="${zsh_cache}/zcompdump"
  autoload -Uz compinit && compinit -d "$zsh_compdump"
  if ! [[ "${zsh_compdump}.zwc" -nt "$zsh_compdump" ]]; then
    _zsh_compile "$zsh_compdump"
  fi
}
_zsh_completions

unset -f _zsh_compile

# Use bash completions
autoload -Uz bashcompinit
bashcompinit

# Load plugins
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
_zsh_plugins_loading() {
  unset -f "$0"

  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local zsh_configs="${xdg_config_home}/zsh"
  local zsh_plugins="${zsh_configs}/plugins"
  local xdg_cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
  local zsh_cache="${xdg_cache_home}/zsh"
  local zsh_cached_plugins="${zsh_cache}/plugins"
  local file

  for file in ${zsh_plugins}/*-load.zsh(.N); do
    source "$file"
  done

  if [ -f "${zsh_cached_plugins}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    source "${zsh_cached_plugins}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
  fi
  if [ -f "${zsh_cached_plugins}/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
    source "${zsh_cached_plugins}/zsh-autosuggestions/zsh-autosuggestions.zsh"
  fi
  if [ -f "${zsh_cached_plugins}/zsh-vim-mode/zsh-vim-mode.plugin.zsh" ]; then
    source "${zsh_cached_plugins}/zsh-vim-mode/zsh-vim-mode.plugin.zsh"
    bindkey -rpM viins '^[^[' # make <Esc><Esc> go to normal mode immediately
    bindkey -M viins "^[[3;5~" kill-word # make Ctrl+Delete work
    bindkey -M vicmd "^[[3;5~" kill-word # make Ctrl+Delete work
    MODE_CURSOR_VIINS='fg steady bar'
  fi
  if [ -f "${zsh_cached_plugins}/powerlevel10k/powerlevel10k.zsh-theme" ]; then
    source "${zsh_cached_plugins}/powerlevel10k/powerlevel10k.zsh-theme"
  fi
  if [[ -f "${zsh_configs}/.p10k.zsh" ]]; then
    source "${zsh_configs}/.p10k.zsh"
  fi
}
_zsh_plugins_loading

# Set up integrations after instant prompt
_zsh_integrations_post() {
  unset -f "$0"

  local nvim_host_path="_zsh_integration_nvim_host_path"

  # Set up integrations
  local xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
  local zsh_configs="${xdg_config_home}/zsh"
  local zsh_integrations="${zsh_configs}/integrations"
  if [ -f "${zsh_integrations}/aqua.zsh" ]; then
    source "${zsh_integrations}/aqua.zsh"
  fi
  local file
  for file in ${zsh_integrations}/flatpak/*.sh(.N); do
    source "$file"
  done
  for file in ${zsh_integrations}/flatpak/*.zsh(.N); do
    source "$file"
  done
  for file in ${zsh_integrations}/cli/*.sh(.N); do
    source "$file"
  done
  for file in ${zsh_integrations}/cli/*.zsh(.N); do
    source "$file"
  done
}
_zsh_integrations_post
unset _zsh_integration_nvim_host_path

# TODO: include https://github.com/marlonrichert/zsh-autocomplete
